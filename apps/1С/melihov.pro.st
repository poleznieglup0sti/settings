{1,
{14,
{"AndreyM (GroovyEx)",1,0,"",""},
{8,
{"Управляющие",1,0,"",""},
{0,
{"Если",0,0,"Если","Если <?> Тогда
	
КонецЕсли;"}
},
{0,
{"Пока",0,0,"Пока","Пока <?> Цикл
		
КонецЦикла;"}
},
{0,
{"Для",0,0,"Для","Для <?> По  Цикл
	
КонецЦикла;"}
},
{0,
{"Для каждого",0,0,"Для[ Каждого]","Для каждого <?> Из  Цикл
	
КонецЦикла;"}
},
{0,
{"Попытка",0,0,"Попы[тка]","Попытка
	<?>
Исключение
    //Сообщить(ОписаниеОшибки());
КонецПопытки;"}
},
{0,
{"ИначеЕсли",0,0,"ИначеЕсли","ИначеЕсли <?> Тогда"}
},
{7,
{"Процедура",1,0,"",""},
{0,
{"Процедура",0,0,"Проц[едура]","Процедура <?>()
		
КонецПроцедуры
"}
},
{0,
{"Процедура с заголовком",0,0,"Процедура","////////////////////////////////////////////////////////////////////////////////
//
// Процедура <?""Введите имя процедуры"">
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
Процедура <?""Введите имя процедуры"">()
    <?>
КонецПроцедуры //<?""Введите имя процедуры"">

"}
},
{0,
{"Процедура НаКлиенте",0,0,"Проц[едура]","&НаКлиенте
Процедура <?>()
	
КонецПроцедуры
"}
},
{0,
{"Процедура НаСервереБезКонтекста",0,0,"Проц[едура]","&НаСервереБезКонтекста
Процедура <?>()

КонецПроцедуры"}
},
{0,
{"Процедура НаСервере",0,0,"Проц[едура]","&НаСервере
Процедура <?>()
	
КонецПроцедуры
"}
},
{0,
{"Процедура НаКлиентеНаСервереБезКонтекста (только модули упр.форм)",0,0,"Проц[едура]","&НаКлиентеНаСервереБезКонтекста
Процедура <?>()
	
КонецПроцедуры
"}
},
{0,
{"Процедура НаКлиентеНаСервере (только модули команд)",0,0,"Проц[едура]","&НаКлиентеНаСервере
Процедура <?>()
	
КонецПроцедуры
"}
}
},
{7,
{"Функция",1,0,"",""},
{0,
{"Функция",0,0,"Функ[ция]","Функция <?>()
	
	Результат = Неопределено;
	
	Возврат Результат;
	
КонецФункции
"}
},
{0,
{"Функция с заголовком",0,0,"Функция","////////////////////////////////////////////////////////////////////////////////
//
// Функция <?""Введите имя функции"">
//
// Описание:
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение: 
//
Функция <?""Введите имя функции"">()
   		
	Результат = Неопределено;
	<?>   
	Возврат Результат; 	

КонецФункции //<?""Введите имя функции"">
"}
},
{0,
{"Функция НаКлиенте",0,0,"Функ[ция]","&НаКлиенте
Функция <?>()
	
	Результат = Неопределено;
	   
	Возврат Результат;
	
КонецФункции
"}
},
{0,
{"Функция НаСервереБезКонтекста",0,0,"Функ[ция]","&НаСервереБезКонтекста
Функция <?>()
	
	Результат = Неопределено;
	   
	Возврат Результат;
	
КонецФункции
"}
},
{0,
{"Функция НаСервере",0,0,"Функ[ция]","&НаСервере
Функция <?>()
	
	Результат = Неопределено;
	   
	Возврат Результат;
	
КонецФункции
"}
},
{0,
{"Функция НаКлиентеНаСервереБезКонтекста (только модули упр.форм)",0,0,"Функ[ция]","&НаКлиентеНаСервереБезКонтекста
Функция <?>()
	
	Результат = Неопределено;
	   
	Возврат Результат;
	
КонецФункции"}
},
{0,
{"Функция НаКлиентеНаСервере (только модули команд)",0,0,"Функ[ция]","&НаКлиентеНаСервере
Функция <?>()
	
	Результат = Неопределено;
	   
	Возврат Результат;	
	
КонецФункции"}
}
}
},
{7,
{"Прикладные",1,0,"",""},
{0,
{"Значение перечисления",0,0,"Переч[исления.]","Перечисления.<?"""", ЗначениеПеречисления>"}
},
{0,
{"ВыборСчетаДт",0,0,"СчетДт=","СчетДт = <?"""", ПланСчетовПредопределенныеДанные>;"}
},
{0,
{"ВыборСчетаКт",0,0,"СчетКт=","СчетКт = <?"""", ПланСчетовПредопределенныеДанные>;"}
},
{0,
{"Движение",0,0,"Движение=","Движение = Движения<?>
Движение.Период = Дата;"}
},
{0,
{"СубконтоДт",0,0,"СубконтоДт","СубконтоДт[<?"""", ПланВидовХарактеристикПредопределенныеДанные>] = <?>;"}
},
{0,
{"СубконтоКт",0,0,"СубконтоКт","СубконтоКт[<?"""", ПланВидовХарактеристикПредопределенныеДанные>] = <?>;"}
},
{0,
{"Граница",0,0,"Граница=","Граница = Новый Граница(<?>, <?"""", ВыборВарианта, ""ВидГраницы.Включая"", ""ВидГраницы.Включая"", ""ВидГраницы.Исключая"", ""ВидГраницы.Исключая"">);"}
}
},
{16,
{"Раскладка клавиатуры",1,0,"",""},
{0,
{">",0,0,"Ю",">"}
},
{0,
{"<",0,0,"Б","<"}
},
{0,
{"<>",0,0,"БЮ","<>"}
},
{0,
{"<=",0,0,"Б=","<="}
},
{0,
{">=",0,0,"Ю=",">="}
},
{0,
{"ЕстьТгдд",0,0,"ЕстьТгдд","ЕСТЬNULL(<?>"}
},
{0,
{"NULL",0,0,"тгдд","NULL"}
},
{0,
{"[]",0,0,"хъ","[<?>]"}
},
{0,
{"|",0,0,"\ ","|  <?>"}
},
{0,
{"'",0,0,"ээ","'<?>'"}
},
{0,
{"&",0,0,"? ","&<?>"}
},
{0,
{"WebЦвета",0,0,"цуицвета","WebЦвета"}
},
{0,
{"?НаКлиенте",0,0,"?наКлиенте","&НаКлиенте"}
},
{0,
{"?НаСервере",0,0,"?НаСер[вере]","&НаСервере"}
},
{0,
{"?НаСервереБезКонтекста",0,0,"?НаСер[вереБезКонтекста]","&НаСервереБезКонтекста"}
},
{0,
{"?НаКлиентеНаСервереБезКонтекста",0,0,"?НаКлиенте[НаСервереБезКонтекста]","&НаКлиентеНаСервереБезКонтекста"}
}
},
{7,
{"Коллекции значений",1,0,"",""},
{0,
{"ТЗ",0,0,"ТЗ=","ТЗ = Новый ТаблицаЗначений;
<?>"}
},
{0,
{"СЗ",0,0,"СЗ=","СЗ = Новый СписокЗначений;
<?>"}
},
{0,
{"ФС",0,0,"ФС=","ФиксированнаяСтруктура = Новый ФиксированнаяСтруктура(""<?>"", );
"}
},
{0,
{"Структура",0,0,"Структура=","Структура = Новый Структура;
<?>"}
},
{0,
{"Соответствие",0,0,"Соответствие=","Соответствие = Новый Соответствие;
<?>"}
},
{0,
{"ДеревоЗначений",0,0,"ДеревоЗначений=","ДеревоЗначений = Новый ДеревоЗначений;
<?>"}
},
{0,
{"Массив",0,0,"Массив=","Массив = Новый Массив(<?>);"}
}
},
{10,
{"Запросы",1,0,"",""},
{0,
{"Запрос с конструктором",0,0,"Запрос=","Запрос = Новый Запрос;
Запрос.Текст = ""<?"""", ТекстЗапроса>"";
<?>Запрос.УстановитьПараметр("""", );
РезультатЗапроса = Запрос.Выполнить();

"}
},
{0,
{"Запрос вручную",0,0,"Запрос=","Запрос = Новый Запрос;
Запрос.Текст = ""
|ВЫБРАТЬ
|   <?>
|
|
|
|
|
|
|
|"";

Запрос.УстановитьПараметр("""", );
РезультатЗапроса = Запрос.Выполнить();
"}
},
{0,
{"Документ",0,0,"Документ.","Документ.<?"""", ОбъектМетаданных, ""Документ"", ""Документ.ТабличнаяЧасть"">"}
},
{0,
{"Справочник",0,0,"Справочник.","Справочник.<?"""", ОбъектМетаданных, ""Справочник"", ""Справочник.ТабличнаяЧасть"">"}
},
{0,
{"РегистрСведений",0,0,"Рег[истрСведений.]","РегистрСведений.<?"""", ОбъектМетаданных, ""РегистрСведений""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""СрезПервых"", "".СрезПервых(<?>)"", ""СрезПоследних"", "".СрезПоследних(<?>)"">"}
},
{0,
{"РегистрНакопления",0,0,"Рег[истрНакопления.]","РегистрНакопления.<?"""", ОбъектМетаданных, ""РегистрНакопления""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"">"}
},
{0,
{"РегистрБухгалтерии",0,0,"Рег[истрБухгалтерии.]","РегистрБухгалтерии.<?"""", ОбъектМетаданных, ""РегистрБухгалтерии""><?"""", ВыборВарианта, ""Основная таблица"", ""<?>"", ""Субконто"", "".Субконто"", ""ДвиженияССубконто"", "".ДвиженияССубконто(<?>)"", ""Остатки"", "".Остатки(<?>)"", ""Обороты"", "".Обороты(<?>)"", ""ОстаткиИОбороты"", "".ОстаткиИОбороты(<?>)"", ""ОборотыДтКт"", "".ОборотыДтКт(<?>)"">"}
},
{0,
{"РегистрРасчета",0,0,"Рег[истрРасчета.]","РегистрРасчета.<?"""", ОбъектМетаданных, ""РегистрРасчета"", ""РегистрРасчета.Перерасчет"">"}
},
{0,
{"ЛЕВОЕ СОЕДИНЕНИЕ",0,0,"ЛЕВОЕ","ЛЕВОЕ СОЕДИНЕНИЕ"}
},
{0,
{"ПРАВОЕ СОЕДИНЕНИЕ",0,0,"ПРАВОЕ","ПРАВОЕ СОЕДИНЕНИЕ"}
}
},
{5,
{"Диалоговые",1,0,"",""},
{0,
{"НастройкаПериода",0,0,"НастройкаПериода=","НастройкаПериода = Новый НастройкаПериода;
НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
НастройкаПериода.РедактироватьКакИнтервал = Истина;
НастройкаПериода.РедактироватьКакПериод = Истина;
НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
Если НастройкаПериода.Редактировать() Тогда
	НачПериода = НастройкаПериода.ПолучитьДатуНачала();
	КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
КонецЕсли;
"}
},
{3,
{"Предупреждение",1,0,"",""},
{0,
{"Предупреждение",0,0,"Пр[едупреждение]","ПоказатьПредупреждение(,<?>, 60);"}
},
{0,
{"Предупреждение",0,0,"ПоказатьПр[едупреждение]","ПоказатьПредупреждение(,<?>, 60);"}
},
{0,
{"Предупреждение c обработкой оповещения",0,0,"ПоказатьПр[едупреждение]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьПредупреждение(ОписаниеОповещения, <?>, 60);

//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(ДополнительныеПараметры) Экспорт
	
КонецПроцедуры
"}
}
},
{6,
{"Вопрос",1,0,"",""},
{0,
{"Вопрос",0,0,"Ответ=","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьВопрос(ОписаниеОповещения, ""<?""Текст вопроса"">"",<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);

<?> 
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры
"}
},
{0,
{"Вопрос",0,0,"ПоказатьВо[прос]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьВопрос(ОписаниеОповещения, ""<?""Текст вопроса"">"",<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);

<?> 
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры
"}
},
{0,
{"Вопрос",0,0,"Воп[рос]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьВопрос(ОписаниеОповещения, ""<?""Текст вопроса"">"",<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);

<?> 
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры
"}
},
{0,
{"Вопрос с анализом результата",0,0,"Ответ=","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьВопрос(ОписаниеОповещения, ""<?""Текст вопроса"">"",<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);

<?> 
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <?"""", ВыборВарианта, ""Равен"", ""="", ""Не равен"", ""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Тайаут"", ""КодВозвратаДиалога.Таймаут""> Тогда
		
	КонецЕсли; 
	
КонецПроцедуры"}
},
{0,
{"Вопрос с анализом результата",0,0,"ПоказатьВо[прос]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьВопрос(ОписаниеОповещения, ""<?""Текст вопроса"">"",<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);

<?> 
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <?"""", ВыборВарианта, ""Равен"", ""="", ""Не равен"", ""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Тайаут"", ""КодВозвратаДиалога.Таймаут""> Тогда
		
	КонецЕсли; 
	
КонецПроцедуры"}
},
{0,
{"Вопрос с анализом результата",0,0,"Воп[рос]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
ПоказатьВопрос(ОписаниеОповещения, ""<?""Текст вопроса"">"",<?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);

<?> 
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <?"""", ВыборВарианта, ""Равен"", ""="", ""Не равен"", ""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Тайаут"", ""КодВозвратаДиалога.Таймаут""> Тогда
		
	КонецЕсли; 
	
КонецПроцедуры"}
}
},
{2,
{"СообщениеПользователю",1,0,"",""},
{0,
{"Сообщение пользователю",0,0,"Сооб[щение]","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ""<?>"";
Сообщение.Сообщить();"}
},
{0,
{"Сообщение пользователю с привязкой к реквизитам",0,0,"Сооб[щение]","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ""<?>"";
Сообщение.Поле = """"; //имя реквизита 
Сообщение.УстановитьДанные(); //Ссылка на объект ИБ
Сообщение.Сообщить();"}
}
},
{2,
{"НачатьПомещениеФайла",1,0,"",""},
{0,
{"ПоместитьФайл",0,0,"ПоместитьФ[айл]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
НачатьПомещениеФайла(ОписаниеОповещения, , ,Истина, УникальныйИдентификатор);

<?>
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры
"}
},
{0,
{"ПоместитьФайл",0,0,"НачатьПо[мещениеФайла]","ОписаниеОповещения = Новый ОписаниеОповещения(""<?""Имя процедуры обработчика"">"", ЭтотОбъект);
НачатьПомещениеФайла(ОписаниеОповещения, , ,Истина, УникальныйИдентификатор);

<?>
//Вынести в отдельную процедуру
&НаКлиенте
Процедура <?""Имя процедуры обработчика"">(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры
"}
}
}
},
{3,
{"Табличный документ",1,0,"",""},
{0,
{"ТабДок",0,0,"ТабДок=","ТабДок = <?"""", ВыборВарианта, ""ЭлементыФормы.ТабДок"", ""ЭлементыФормы.ТабДок"", ""Новый ТабличныйДокумент"", ""Новый ТабличныйДокумент"">;
<?>"}
},
{0,
{"ПолучитьОбласть",0,0,"Обл=","Обл<?""Название области""> = <?>.ПолучитьОбласть(Обл""<?""Название области"">"");"}
},
{0,
{"Макет",0,0,"Макет=","Макет = ПолучитьМакет(""Макет"");"}
}
},
{22,
{"Сокращения",1,0,"",""},
{0,
{"НачалоМесяца",0,0,"НМ","НачалоМесяца(<?>)"}
},
{0,
{"КонецМесяца",0,0,"КМ","КонецМесяца(<?>)"}
},
{0,
{"НачалоДня",0,0,"НД","НачалоДня(<?>)"}
},
{0,
{"КонецДня",0,0,"КД","КонецДня(<?>)"}
},
{0,
{"ТекущаяДата",0,0,"ТД","ТекущаяДата()"}
},
{0,
{"ПериодДействияНачало",0,0,"ПДН","ПериодДействияНачало"}
},
{0,
{"ПериодДействияКонец",0,0,"ПДК","ПериодДействияКонец"}
},
{0,
{"БазовыйПериодНачало",0,0,"БПН","БазовыйПериодНачало"}
},
{0,
{"БазовыйПериодКонец",0,0,"БПК","БазовыйПериодКонец"}
},
{0,
{"ПланыВидовХарактеристик",0,0,"ПВХ","<?"""", ПланВидовХарактеристикПредопределенныеДанные>"}
},
{0,
{"ПланыВидовРасчета",0,0,"ПВР","<?"""", ПланВидовРасчетаПредопределенныеДанные>"}
},
{0,
{"ДобавиьМесяц",0,0,"ДМ","ДобавитьМесяц(<?>,)"}
},
{0,
{"Неопределено",0,0,"Неоп[ределено]","Неопределено"}
},
{0,
{"УстановитьПараметр",0,0,"УП","УстановитьПараметр(""<?>"",);"}
},
{0,
{"Контрагент",0,0,"Конт[рагент]","Контрагент"}
},
{0,
{"Номенклатура",0,0,"Номе[нклатура]","Номенклатура"}
},
{0,
{"Количество",0,0,"Коли[чество]","Количество"}
},
{0,
{"Стоимость",0,0,"Стои[мость]","Стоимость"}
},
{0,
{"УстановитьЗначениеПараметра",0,0,"УЗП","УстановитьЗначениеПараметра(""<?>"",);"}
},
{0,
{"МоментВремени",0,0,"МВ","МоментВремени()"}
},
{0,
{"ТекущаяДатаСеанса",0,0,"ТДС","ТекущаяДатаСеанса()"}
},
{0,
{"РежимЗаписиПроведение",0,0,"РЗП","Записать(РежимЗаписиДокумента.Проведение);"}
}
},
{4,
{"НаборЗаписей",1,0,"",""},
{0,
{"РегистрСведений",0,0,"НаборЗаписей=","НаборЗаписей = РегистрыСведений.<?"""", РегистрСведений>.СоздатьНаборЗаписей();
"}
},
{0,
{"РегистрНакопления",0,0,"НаборЗаписей=","НаборЗаписей = РегистрыНакопления.<?"""", РегистрНакопления>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"РегистрБухгалтерии",0,0,"НаборЗаписей=","НаборЗаписей = РегистрыБухгалтерии.<?"""", РегистрБухгалтерии>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"РегистрРасчета",0,0,"НаборЗаписей=","НаборЗаписей = РегистрыРасчета.<?"""", РегистрРасчета>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
}
},
{11,
{"Прочие",1,0,"",""},
{0,
{"Формат",0,0,"Формат","Формат(<?>, ""<?, ФорматнаяСтрока>"")"}
},
{0,
{"Отчерк",0,0,"/*","//_____________________________________________________________
<?>"}
},
{0,
{"Конструктор описания типов",0,1,"","<?""Конструктор описания типов"", КонструкторОписанияТипов>"}
},
{0,
{"Проверка типа",0,1,"","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда

	<?>

КонецЕсли;"}
},
{0,
{"Врезка ""Изменено""",0,1,"","// ++ ERP-
<?>
// -- ERP-
"}
},
{0,
{"Шрифт",0,0,"Шрифт=","//	КОНСТРУКТОР     Имя шрифта, Размер, Жирный, Наклонный, Подчеркнутый, Зачеркнутый
Шрифт = Новый Шрифт(   <?>       ,       ,       ,          ,             ,            );"}
},
{0,
{"ЧислоПрописью",0,0,"Число[Прописью]","ЧислоПрописью(<?>,,""рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"")"}
},
{0,
{"Выборка",0,0,"Выборка=","Выборка = <?>.Выбрать();
Пока Выборка.Следующий() Цикл

КонецЦикла; "}
},
{0,
{"Группировка с комментарием ",0,0,"\хъ","//{<?>
//}"}
},
{0,
{"Группировка с комментарием Открыть",0,0,"\х","//{<?>"}
},
{0,
{"Группировка с комментарием Закрыть",0,0,"\ъ","//}<?>"}
}
},
{3,
{"Инструкции предпроцессору",1,0,"",""},
{0,
{"#Если",0,0,"№Если","#Если <?"""", ВыборВарианта, ""Клиент"", ""Клиент"", ""Сервер"", ""Сервер"", ""ВнешнееСоединение"", ""ВнешнееСоединение"" ,""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"",""ТолстыйКлиентУправляемоеПриложение"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""ВебКлиент"", ""ВебКлиент""> Тогда
    <?> 	
#КонецЕсли"}
},
{0,
{"#Если",0,0,"#Если","#Если <?"""", ВыборВарианта, ""Клиент"", ""Клиент"", ""Сервер"", ""Сервер"", ""ВнешнееСоединение"", ""ВнешнееСоединение"" ,""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"",""ТолстыйКлиентУправляемоеПриложение"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""ВебКлиент"", ""ВебКлиент""> Тогда
    <?> 	
#КонецЕсли"}
},
{4,
{"ИзменениеИКонтроль",1,0,"",""},
{0,
{"#Удаление",0,0,"#Удал","#Удаление
#КонецУдаления"}
},
{0,
{"#Удаление",0,0,"№Удал","#Удаление
#КонецУдаления"}
},
{0,
{"#Вставка",0,0,"#Вст","#Вставка   

#КонецВставки"}
},
{0,
{"#Вставка",0,0,"№Вст","#Вставка   

#КонецВставки"}
}
}
},
{4,
{"Блокировки",1,0,"",""},
{0,
{"Блокировка РегистрНакопления",0,0,"Блокировка=","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрНакопления.<?"""", РегистрНакопления>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрБухгалтерии",0,0,"Блокировка=","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрБухгалтерии.<?"""", РегистрБухгалтерии>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.УстановитьЗначение(""Период"", Новый Диапазон( , ));
//ЭлементБлокировки.УстановитьЗначение(""Счет"", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрСведений",0,0,"Блокировка=","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрСведений.<?"""", РегистрСведений>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрРасчета",0,0,"Блокировка=","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрРасчета.<?"""", РегистрРасчета>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
}
},
{1,
{"Запись",1,0,"",""},
{0,
{"ЗаписьРегистраРасчетов",0,0,"Запись=","Запись = Движения.<?"""", РегистрРасчета>.Добавить();
Запись.ПериодРегистрации = Дата;
Запись.ПериодДействияНачало = ;
Запись.ПериодДействияКонец = ;
Запись.Сторно = Ложь;
Запись.Сотрудник = ;
Запись.Подразделение = ;
Запись.График = ;
Запись.Параметр = ;
Запись.БазовыйПериодНачало = ;
Запись.БазовыйПериодКонец = ;"}
}
},
{5,
{"Области",1,0,"",""},
{0,
{"Область",0,0,"Обла[сть]","//_____________________________________________________________
#Область <?""Имя области (без пробелов)"">

#КонецОбласти  "}
},
{0,
{"ОбластиМодуляФормы",0,0,"ОблМФ","#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти  



"}
},
{0,
{"ОбластиМодуляОбъекта",0,0,"ОблМО","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс
<?>
#КонецОбласти

#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область Инициализация

#КонецОбласти 

#КонецЕсли"}
},
{0,
{"ОбластиМодуляВнешнейОбработки",0,0,"ОблВО","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешнем отчете или обработке
// 
// Возвращаемое значение:
//   - Структура - см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке
//
Функция СведенияОВнешнейОбработке() Экспорт  
	
	МетаданныеОбработки = ЭтотОбъект.Метаданные();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.3.1.1"");
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = ""1.0"";    	
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Наименование = МетаданныеОбработки.Представление();
    ПараметрыРегистрации.Информация = МетаданныеОбработки.Комментарий;	
						
	ДобавитьКоманду(ПараметрыРегистрации.Команды, МетаданныеОбработки.Представление(), ""ОткрытьФорму"", 
						ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы(), Истина); 	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Процедура выполнения команды
//
// Параметры:
//  ИдентификаторКоманды		 - Строка	 - идентификатор команды
//  ПараметрыВыполненияКоманды	 - Струткура	 - параметры команды
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды) Экспорт
        	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область БСП

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = """", Скрыть = Неопределено, ЗаменяемыеКоманды = Неопределено)
	
	НоваяКоманда 						= ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление 			= Представление; 
	НоваяКоманда.Идентификатор 			= Идентификатор;
	НоваяКоманда.Использование 			= Использование;
	НоваяКоманда.ПоказыватьОповещение 	= ПоказыватьОповещение;
	НоваяКоманда.Модификатор 			= Модификатор;
	НоваяКоманда.Скрыть 				= Скрыть;
	НоваяКоманда.ЗаменяемыеКоманды 		= ЗаменяемыеКоманды;
	
КонецПроцедуры

#КонецОбласти  

#КонецОбласти 

#КонецЕсли


"}
},
{0,
{"ОбластьМодуляКоманды",0,0,"ОблМК","#Область ОбработчикиСобытий

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти"}
}
}
}
}